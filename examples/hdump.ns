#! /usr/bin/env nop
\
\ An implementation of the hexdump specified in
\ http://wiki.c2.com/?HexDumpInManyProgrammingLanguages
\

0 value r/o
: file-size ( fd -> u )   push 0 2 pop position-file ;
: spaces ( u -> )   for space next ;
: within ( u lo hi -> flag )  push over <=  swap pop <  and ;
: 2dup  over over ;
8 value cell
: min ( a b -> a|b )   2dup < if drop exit then nip ;

: fsize ( a u -> u' )
  r/o 0 open-file  dup file-size  swap close " can't retrieve file size" ?abort ;

0 value /line
variable off
: ~printable? ( c -> flag )   bl 127 within not ;

: .off ( u -> )      off @ <# cell for # # next #> type  off +! ;
: align ( u -> )     /line swap - 3 * spaces ;
: h. ( u -> )        <# # # #> type space ;
: bytes ( a u -> )   swap a! for 1@+ h. next ;
: c. ( c -> )        dup ~printable? if  drop [char] .  then  emit ;
: text ( a u -> )    swap a! for 1@+ c. next ;
: line ( a u -> )    dup .off  2 spaces  2dup bytes  dup align 2 spaces  text ;

variable remaining
0 value fd

: size ( -> u )         remaining @ /line min ;
: update ( u -> )       negate remaining +! ;

: open ( a u -> )     r/o 0 open-file dup 0 < " can't open file" ?abort to fd ;
: position ( u -> )   0 fd position-file 0 < " can't position file" ?abort ;
: fdclose               fd close drop ;
: fdread ( a -> u )
   size fd read  dup 0 < " can't read from file" ?abort
   dup update ;

: reserve    /line allot ;
: release    /line negate allot ;

: setup ( a u start end width -> a' )
   to /line
   over -  remaining !
   push  open  pop dup position  dup off !
   hex here reserve ;

: (hdump) ( a -> )
   push
   begin
      r@ fdread dup
   while
      r@ swap line cr
   repeat
   fdclose rdrop ;

: hdump ( a u -> )   2dup fsize  0 swap 16 setup  (hdump)  release ;

anon:
   begin next-arg dup while
      hdump
   repeat
   drop drop ;
execute
