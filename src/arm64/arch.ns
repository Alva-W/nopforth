macro
: swap
   $AA0003E9 i,    \ mov x9, x0
   $F94003A0 i,    \ ldr x0, [fp]
   $F90003A9 i, ;  \ str x9, [fp]

: over
   $F94003A9 i,    \ ldr x9, [fp]
   $F81F8FA0 i,    \ dup
   $AA0903E0 i, ;  \ mov x0, x9

: push
   $A9BF7FE0 i,    \ stp x0, xzr, [sp, #-16]!
   $F84087A0 i, ;  \ drop

: pop
   $F81F8FA0 i,    \ dup
   $A8C17FE0 i, ;  \ ldp x0, xzr, [sp], #16


: @
   $F9400000 i, ;  \ ldr x0, [x0]

: !
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $F9000120 i,    \ str x0, [x9]
   $F84087A0 i, ;  \ drop

: r@
   $F81F8FA0 i,    \ dup
   $F94003E0 i, ;  \ ldr x0, [sp]


: +
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $8B090000 i, ;  \ add x0, x0, x9

: -
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $CB090000 i, ;  \ sub x0, x0, x9

: /
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $9AC90C00 i, ;  \ sdiv x0, x0, x9

: *
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $9B097C00 i, ;  \ mul x0, x0, x9


: and
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $8A090000 i, ;  \ and x0, x0, x9

: xor
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   $CA090000 i, ;  \ eor x0, x0, x9

: =
   $F94003A9 i,    \ ldr x9, [fp]
   $EB09001F i,    \ cmp x0, x9
   $F84087A0 i,    \ drop
   $9A9F17E0 i, ;  \ cset x0, eq


: a
   $F81F8FA0 i,    \ dup
   $AA1C03E0 i, ;  \ mov x0, x28

: a!
   $AA0003FC i,    \ mov x28, x0
   $F84087A0 i, ;  \ drop


: if ( -> a )
   $AA0003E9 i,    \ mov x9, x0
   $F84087A0 i,    \ drop
   codep @
   $B4000009 i, ;  \ cbz x9, offset = 0

macro
: then ( a -> )
   dup  codep @ swap - 4 /  32 *  over @ +  swap i! ;

: branch ( dst -> )
   codep @ -  4 /  $3FFFFFF and  $14000000 +  i, ;  \ b dst

: branch-unresolved ( -> a )
   codep @  $14000000 i, ;  \ b offset = 0
