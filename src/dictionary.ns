\ SPDX-License-Identifier: MIT
\ Copyright (c) 2018-2022 IruatÃ£ Martins dos Santos Souza

forth
: find ( a u -> a'|0 )   latest @ dfind ;

: ' ( -> a )      word            find dup 0 = if drop abort then  cfa ;
: f' ( -> a|0 )   word flatest @ dfind dup 0 = if drop abort then  cfa ;

macro
: [']    '  ` lit ;
: [f']   f' ` lit ;
forth

: allot ( n -> )   here +  h ! ;

: cell   8 ;
: cells ( -> u )   cell * ;

: pfa ( 'def -> 'data )   \ return a pointer to a definition's data area
   2 cells +  dup 1@ +  1 +  aligned ;

: (does>) ( R: caller's-return-address code-after-does> )
   codep @ /branch - branch? if  codep @ /branch -  codep !  then
   pop ` branch  \ compile branch to code after does>
   ;             \ and return to our caller's caller

macro
: does>
   [f'] (does>) call,  \ (does>) will be executed when defining a word
   ` prolog            \ compile prolog in the code after does>
   0 hole ! ;          \ do not optimize last call

forth
: created ( a u -> )
   entry,
   >cfa  codep @ swap !  \ store next code address as the cfa
   here ` lit            \ compile here as literal
   does> ;

: create   word created ;

: variable   create 0 , ;
: value      create ,  does> @ ;

: ?find ( -> a )   word find   dup 0 = if drop abort then ;

macro
: to ( n -> )   ?find pfa  ` lit ` ! ;
forth
: to ( n -> )   ?find pfa  ! ;


variable mark-h
variable mark-codep
variable mark-mlatest
variable mark-flatest
variable mark-latest

: mark
   h @ mark-h !  codep @ mark-codep !
   mlatest @ mark-mlatest !  flatest @ mark-flatest !  latest @ mark-latest ! ;

: empty
   mark-h @ h !  mark-codep @ codep !
   mark-mlatest @ mlatest ! mark-flatest @ flatest !  mark-latest @ latest ! ;
