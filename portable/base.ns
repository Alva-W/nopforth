forth
: abort0   0 0 abort ;
: cfa ( a -> a' )   >cfa @ ;

macro
: `   next-word mlatest dfind dup 0 = if abort0 then  cfa call, ;

: asave   ` a    ` push ;
: arest   ` pop  ` a! ;

: begin ( -> a )        here ;
: while ( a -> a' a )   ` if swap ;
: again ( a -> )        ` branch ;
: repeat ( a a' -> )    ` again ` then ;

: for ( -> a a' )    ` push ` begin ` r@ ` while ;
: next ( a a' -> )   ` rdec ` repeat ` rdrop ;

: 2push   ` push ` push ;
: 2pop    ` pop ` pop ;
: 2dup    ` over ` over ;

: not   0 ` lit ` = ;


( macro -> forth )
\ We define forth words using the macros, so they can be used interactively
forth
: dup    dup ;
: drop   drop ;
: swap   swap ;
: over   over ;
: nip    nip ;
: 2dup   2dup ;

: a     a ;
: a!    a! ;
: @     @ ;
: @+    @+ ;
: b@    b@ ;
: b@+   b@+ ;
: !     ! ;
: !+    !+ ;
: b!    b! ;
: b!+   b!+ ;

: +      + ;
: -      - ;
: *      * ;
: /mod   /mod ;
: /      /mod nip ;
: mod    /mod drop ;

: lshift   lshift ;
: rshift   rshift ;

: and      and ;
: or       or ;
: xor      xor ;
: ~        ~ ;

: not      not ;
: =        = ;
: ~=       ~= ;
: <        < ;
: <=       <= ;
: >=       >= ;

: negate   negate ;

: tuck ( x y -> y x y )   swap over ;
: within ( u lo hi -> flag )  push over <=  swap pop <  and ;
: min ( a b -> a|b )          2dup < if drop exit then nip ;


( Dictionary )
forth
: find ( a u -> a'|0 )   latest @ dfind ;

: ' ( -> a )      next-word            find dup 0 = if abort0 then  cfa ;
: f' ( -> a|0 )   next-word flatest @ dfind dup 0 = if abort0 then  cfa ;

macro
: [']    '  ` lit ;
: [f']   f' ` lit ;
forth

: allot ( n -> )   here +  h ! ;

: pfa ( 'def -> 'data )   \ return a pointer to a definition's data area
   cfa 5 + ;

: (does>)   \ runtime for does>
   latest @ @ cfa
   pop swap call!   \ compile a call to the code following does>
   0 hole ! ;       \ do not transform the previous call into a jump

macro
: does>
   [f'] (does>) call,  \ compile a call to the runtime for does>

   \ at runtime R has the address of the data area for the definition,
   \ compile a pop to retrieve that address
   ` pop ;
forth

: created ( a u -> )
   entry,
   >cfa  here swap !  \ store next data address as the cfa
   0 call,            \ compile a dummy call
   does> ;

: create   next-word created ;

: variable   create 0 , ;
: value      create ,  does> @ ;

: ?find ( -> a )   next-word find   dup 0 = if abort then ;

macro
: to ( n -> )   ?find pfa  ` lit ` ! ;
forth
: to ( n -> )   ?find pfa  ! ;

8 value cell
: cells ( -> u )   cell * ;

: marker
   here              \ save current HERE so the marker definition removes itself
   forth create
      ,              \ 0:       dictionary pointer
      flatest @ @ ,  \ cell:    next to last forth definition
      mlatest @ ,    \ 2 cells: last macro definition
   does>
      dup        @ h !
      dup cell + @ flatest !
       2 cells + @ mlatest ! ;


( Memory utilities )
forth
: advance ( a u n -> a+n u-n )   swap over  - push + pop ;

: move ( src dst u -> )
   push push a! pop pop
   begin dup while
     over b@+ swap b!
     1 advance
   repeat
   drop drop ;

: +! ( n a -> )   swap over  @ +  swap ! ;
: mem, ( a u -> )   here over allot  swap move ;

: mem= ( a1 a2 u -> f )
   dup 0 = if  drop drop drop  -1 exit  then
   push  over b@ over b@ ~= if  drop drop rdrop  0 exit then
   push  1 +  pop pop 1 advance  mem= ;

: search ( a u b -> a' u' )
   over 0 = if  drop exit  then
   swap push  over b@ over = if  drop pop exit  then
   pop swap push  1 advance  pop search ;

: align ( a u -> a' )   1 -  swap over +  swap not and ;

0 value record:
: field: ( offset size alignment -> offset+size' )
   create   swap push  align dup ,  pop +
   does> ( a -> a' )   @ + ;


( Strings )
forth
32 value bl
: cr      10 emit ;
: space   bl emit ;
: spaces ( u -> )   for space next ;

: printable? ( c -> flag )    bl 127 within ;

: char ( -> b )     bl word drop b@ ;
macro
: [char] ( -> b )   char ` lit ;
forth

: " ( -> a u )
   [char] " word  here push  dup allot
   tuck  r@ swap move  pop swap ;

: z" ( -> a )         "  over +  0 swap b! ;
: s>z ( a u -> a' )   here swap 2dup 2push  move  2pop over +  0 swap b! ;
: zlen ( a -> u )     a! 0 begin b@+ while 1 + repeat ;
: z>s ( a -> a' u )   dup zlen ;

: ."   [char] " word type ;

: s= ( a1 u1 a2 u2 -> f )
   push swap pop over ~= if  drop drop drop 0 exit  then mem= ;

: head ( a u b -> a u' )   push 2dup pop search  nip - ;
: tail ( a u b -> a u' )   search  dup if 1 advance then ;

macro
: slit ( a len -> )
   dup push  ` branch-unresolved  here push push
   \ r: len addr-of-string-start addr-of-branch-dst
   mem,  pop ` then  pop ` lit  pop ` lit ;

: "    [char] " word  ` slit ;
: ."   ` " [f'] type call, ;

forth
: ?abort ( flag a u -> )   2push if 2pop abort then  rdrop rdrop ;


( Pictured numeric conversion )
forth
: digit ( n -> n' )   dup 9 >  7 and +  48 + ;

: hold ( count rem b -> b count+1 rem )   swap push  swap 1 + pop ;

: <# ( n -> 0 n )               0 swap ;
: #  ( n -> ... count rem )     base @ /mod swap digit hold ;
: #> ( ... count rem -> a u )   asave  drop  here a!  dup push for b!+ next  here pop  arest ;
: #s ( n -> ... count rem )     begin # dup while repeat ;

: abs ( n -> |n| )   dup 0 < if negate then ;
: sign ( n -> )   0 < if  [char] - hold  then ;


: (.) ( n -> )   dup push abs <#  #s pop sign #> ;
: . ( n -> )     (.) type space ;

: depth ( -> u )   S0 sp@ - 8 /  2 - ;
: .S   depth S0 16 - swap for  dup @ . 8 -  next drop  ." <- top " ;

: spfill ( u -> )    16 swap - 3 * spaces  space ;
: .addr ( a -> )     base @ push hex  <# cell for # # next #> type  pop base ! ;
: hb. ( u -> )       base @ push hex  <# bl hold # # #> type  pop base ! ;
: bytes ( a u -> )   swap a! for b@+ hb. next ;
: c. ( c -> )        dup printable? not if  drop [char] .  then  emit ;
: text ( a u -> )    swap a! for b@+ c. next ;
: line ( a u -> )    over .addr 2 spaces  2dup bytes dup spfill  text cr ;

: dump ( a u -> )
   begin dup while
      2dup 16 min line
       dup 16 min advance
   repeat
   drop drop ;


( Files )
forth
: (open-create) ( a u mode syscall# -> fd )   push push s>z pop pop syscall2 ;
: create-file ( a u mode -> fd )   85 (open-create) ;
: open-file ( a u mode -> fd )   2 (open-create) ;

: read ( a u fd -> n )   sysread ;
: read-byte ( fd -> b|-1 )
   push here 1 pop read 1 = if  here b@ exit  then -1 ;

: read-line ( a u fd -> n )
   push push a! pop pop over  for
     dup read-byte dup b!+
     dup -1 = if  drop drop pop - exit  then
         10 = if  drop pop - 1 + exit  then
   next
   drop ;

: write ( a u fd -> n )   syswrite ;
: write-byte ( b fd -> n )   push  here b!  here 1 pop write ;
: write-line ( a u fd -> n )
   dup push write  10 pop write-byte
   1 ~= if  drop -1 exit  then 1 + ;

: close ( fd -> n )   3 syscall1 ;
: position-file ( n ref fd -> n' )   swap push swap pop 8 syscall3 ;
: file-position ( fd -> n' )   push 0 1 pop position-file ;


( File loading )
: input@ ( -> fd buf tot used pos 'refill )
   infd @ inbuf @ intot @ inused @ inpos @ 'refill @ ;

: input! ( fd buf tot used pos 'refill -> )
   'refill ! inpos ! inused ! intot ! inbuf ! infd ! ;

: save-input
   pop pop  input@ push push push push push push  push push ;

: restore-input
   pop pop  pop pop pop pop pop pop input!  push push ;

: file-refill ( -> n )
   0 inpos !  inbuf @ intot @ infd @ read-line  dup inused ! ;

256 value /buf
create buf /buf allot

: included ( a u -> err )
   0 open-file dup 0 < if  drop -1 exit  then
   'prompt @ push  0 'prompt !  save-input
   dup buf /buf 0 0 ['] file-refill input!
   push  readloop  pop close drop
   restore-input  pop 'prompt !  0 ;

: include   10 word included " can't include file" ?abort ;


( Shell utilities )
: #!  ` \ ;

: #args ( -> u )      S0 @ @ ;
: 'arg ( u -> a )     1 + cells  S0 @ + ;
: arg ( u -> a u' )   'arg @ z>s ;
: 'env ( u -> a )     #args 1 + + 'arg @ ;

variable arg-offset
: next-arg ( -> a u )
   arg-offset @  dup #args >= if  drop 0 0 exit  then
   arg  1 arg-offset +! ;

: env-name ( a -> a u )      z>s [char] = head ;
: env-value ( a -> a' u' )   z>s [char] = tail ;

: (getenv) ( a u env# -> a' u'|0 )
   push r@ 'env  dup 0 = if  drop drop drop 0  rdrop exit  then
   push 2dup pop env-name s= if  drop drop pop 'env env-value exit  then
   pop 1 + (getenv) ;

: getenv ( a u -> a' u'|0 )   0 (getenv) ;


marker empty

anon:
  #args 1 = if banner exit then
  2 arg-offset !  1 arg included bye ;
execute
