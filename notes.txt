TODO
----
- [ ] `.S`
- [ ] fix `to` to work inside definitions
- [ ] string literals
- [ ] `s"` macro
- [ ] `."` macro
- [ ] `within`
- [ ] `[compile]` on forth words
- [ ] reorganize base.nf in order of need
- [ ] try if using the processor flags and preserving T
- [ ] make pictured numeric words preserve the A register
- [ ] fix the behavior on stack overflow


Register allocation
-------------------
rax: top of data stack (T)
rsp: top of return stack (R)
rbp: pointer to second cell on data stack (S)
r13: register A


Dictionary structure
--------------------
link[cell] cfa[cell] namelength[1] name[n]


Input
-----
Using the canonical mode input processing (termios(4)) can lead to some
problems. When we are reading from the keyboard directly, this is ok. When we
are reading from a file, the newlines appear as input, not as separators.
Defining separator as either newline, EOT or EOF, a number of solutions are
possible:
  1. Two-level buffering. Bytes would be added to a first buffer. Whenever input
  is required, we return the bytes before the separator from the first buffer
  and advance the position to after the separator.
	Pros:
		* no need to fiddle with terminal settings
		* automatic processing of control characters
	Cons:
		* one level of indirection from the real input

  2. Use non-canonical mode input processing.
    Pros:
        * access to real input as soon as it comes
        * bypassing OS control
    Cons:
        * dealing with control characters
        * dealing with terminal settings

	a) Line at a time. Accumulate bytes until a separator is found. Then, return
	the bytes accumulated.
	b) Word at a time. Accumulate bytes until a separator or a space is found.

  If we eval right after option 2b returned, we can spot typing errors as soon
  as they happen, in a fashion similar to LaForth and colorforth.
